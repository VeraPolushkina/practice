// "use strict";
//объявление переменных глобально
let money, time;

// что бы вопросы не выводились просто так напишем ф-ию и ее будем вызывать
function start() {
    // плюс перед командой заставляет программу определить введенные данные как число
    // переместили переменные с вопросами в ф-ию, но тогда они станут локальными и за пределами ф-ии их видно не будет, нужно сделать их глобальными
    money = +prompt("Ваш бюджет на месяц?");
    time = prompt("Введите дату в формате YYYY-MM-DD");

    //необходимо написать проверку чтобы пользователь не мог оставить строку пустой и не ввел не корректные данные, и не мог отменить промт
    //isNan возвращает true если введены не цифры, строим логическую цепь дальше или пользователь ввел пустую строку или переменная равна null, для того что бы пользователь не мог нажать кнапку отмена, и теперь если один из этих вариантов выполнится то цикл будет продолжаться, пока пользователь не введет цифры
    while (isNaN(money) || money == '' || money == null) {
        //повторение вопроса если выполнилось хоть одно условие
        money = +prompt("Ваш бюджет на месяц?");
    }
}
//ф-ия готова и теперь ее нужно просто вызвать
start();



let appData = {
    budget: money,
    timeData: time,
    expenses: {},
    optionalExpenses: {},
    income: [],
    savings: true,
};

//выбор обязательных расходов можно тоже оформить в виде ф-ии

// for (let i = 0; i < 2; i++) {
//     let a = prompt("Введите обязательную статью расходов в этом месяце", ''),
//         b = prompt("Во сколько обойдется?", '');
//     // проверяем вводимые данные на тип, что бы былв строка и не было null, т.е. если пользователь нажмет отмену это условие уже не выполнится, так тут есть еще проблема что пользователь может оставить строку пустой, так же нужно записать еще одну проверку которая запретит пользователю оставлять строку пустой в переменной a и b, и так же запретить введение пользователем определенного количества символов. 
//     if ((typeof (a)) === 'string' && (typeof (a)) != null && (typeof (b)) != null && a != '' && b != '' && a.length < 50) {
//         console.log('done');
//         appData.expenses[a] = b;
//         // НО если ни чего из этого не подходит то мы теряем нашу статью обязательных расходов, поэтому нужно продумать такой мехaнизм что бы мы возвращались на цикл обратно, вернуться к вопросу заново
//     } else {
//         console.log("bad result");
//         i--;
//     }
// }
//ф-ия по выбору обязательных расходов, весь код из циклв помещаем в ф-ию
function chooseExpenses() {
    for (let i = 0; i < 2; i++) {
        let a = prompt("Введите обязательную статью расходов в этом месяце", ''),
            b = prompt("Во сколько обойдется?", '');
        if ((typeof (a)) === 'string' && (typeof (a)) != null && (typeof (b)) != null && a != '' && b != '' && a.length < 50) {
            console.log('done');
            appData.expenses[a] = b;
        } else {
            i = i - 1;
        }
    }
}

// вызов ф-ии
chooseExpenses();

    // Используем цикл WHILE

    // let i = 0;
    // while (i < 2) {
    //     let a = prompt ("Введите обязательную статью расходов в этом месяце", ""),
    //         b = prompt ("Во сколько обойдется?", "");

    //     if ( typeof(a)==='string' && typeof(a) != null && typeof(b) != null && a != "" && b != "" && a.length < 50) {

    //         console.log ("done");

    //         appData.expenses[a] = b;
    //     } else {
    //          console.log ("bad result");
    //          i--;
    //     }

    //     i++;
    // }



    // Используем цикл DO...WHILE

    // let i = 0;
    // do {
    //     let a = prompt ("Введите обязательную статью расходов в этом месяце", ""),
    //         b = prompt ("Во сколько обойдется?", "");

    //     if ( typeof(a)==='string' && typeof(a) != null && typeof(b) != null && a != "" && b != "" && a.length < 50) {

    //         console.log ("done");

    //         appData.expenses[a] = b;
    //     } else {
    //          console.log ("bad result");
    //          i--;
    //     }

    //     i++;
    // }
    // while(i < 2);


    // запишем буджет на 1 день ориентируясь на отввет пользователя
    // создадим новое свойство в обьекте, теперрь в наш обьекте появилась новая статья, которая будет содержать количество денег на один день в расчете из того что нам ввел пользователь. 
    // appData.moneyPerDay = appData.budget / 30;
    // что бы не выводилось много знаков в числе после занятой (остаток) применем метод toFixed, если оставить после него пустые скобки то мы округлим число до целого, если поставить в скобках 1 то до первого знака после запятой и тд, однако этот метод меняет нашу переменную и возвращает строковое значение, в данном примере это не так критично
appData.moneyPerDay = (appData.budget / 30).toFixed();

    // теперь можем вывести на страницу уже эту информацию в красивом виде

alert('Ежедневный бюджет ' + appData.moneyPerDay + " руб.");

    // Потренировать условия, напишем условие где будем проверять appData.moneyPerDay, цифры берем любые (ответ пользователя)
if (appData.moneyPerDay < 100) {
    console.log("Это минимальный уровень достатка!");
} else if (appData.moneyPerDay > 100 && appData.moneyPerDay < 2000) {
    console.log("Это средний уровень достатка!");
} else if (appData.moneyPerDay > 2000) {
    console.log("Это высокий уровень достатка!");
} else {
    console.log("Произошла ошибка");
}

//Пропишем новую ф-ию которая поможет расчитать накопления с депозита если он есть. в главном объекте есть свойство savings и оно стоит false, начинаем с условия, берем наш объект, его свойство и проверяем стоит ли оно в true, только в этом случае у нас будут выполняться какие то действия. если выполнилось задаем пользователю вопросы, после того как мы получим эти данные то уже сможем расчитать доход за месяц и записать его в нашу базу данных, те в объект appData, поэтому берем appData и создаем ему новое свойство
function checkSavings() {
    if(appData.savings == true) {
        let save = +prompt('Какова сумма накоплений?'),
            percent = +prompt('Под какой процент');
    // поэтому берем appData и создаем ему новое свойство monthIncome (прибыль за месяц). далее простая матиматика, берем деньги которые накоплены делим на 100 что бы получмть процент, делим на 12 мес и умножаем на тот процент который получили от пользователя
        appData.monthIncome = save/100/12*percent;
        alert('Доход с вашего депозита: ' + appData.monthIncome);
    }   
}
//и вызываем эту ф-ию
checkSavings();